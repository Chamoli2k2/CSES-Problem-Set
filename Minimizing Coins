#include<bits/stdc++.h>
using namespace std;
int mod = 1e9 + 7;

// Memoization Code
int solve(vector<int> &nums,vector<vector<int>> &dp,int idx,int target){
    // base case
    if(target == 0) return 0;
    if(idx == (int)nums.size()-1){
        return target%nums[idx] == 0 ? target/nums[idx] : 1e7;
    }

    // Checking if already there
    if(dp[idx][target] != -1) return dp[idx][target];
    
    int take = 1e7;
    if(nums[idx] <= target){
        take = 1 + solve(nums,dp,idx,target-nums[idx]);
    }

    int notTake = solve(nums,dp,idx+1,target);

    return dp[idx][target] = min(take,notTake);
}

// Top Down
int count(int n,int k){
    vector<int> nums(n,0);
    for(int i=0;i<n;i++){
        cin>>nums[i];
    }

    sort(nums.rbegin(),nums.rend());
    vector<vector<int>> dp(n,vector<int>(k+1,0));
    for(int i=1;i<=k;i++){
        if(i % nums[n-1] == 0){
            dp[n-1][i] = i / nums[n-1];
        }
        else{
            dp[n-1][i] = 1e7;
        }
    }
    
    for(int i=n-2;i>=0;i--){
        for(int target=1;target<=k;target++){
            int take = 1e7;
            if(nums[i] <= target){
                take = 1 + dp[i][target-nums[i]];
            }

            int notTake = dp[i+1][target];

            dp[i][target] = min(take,notTake);
        }
    }

    return dp[0][k] >= 1e7 ? -1 : dp[0][k];
}

int main(){
    int n,k;
    cin>>n>>k;
    cout<<count(n,k);
    return 0;
}
